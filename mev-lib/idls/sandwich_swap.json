{
  "address": "XArSfgXtRWmxtyUW6dS6tTky1uYwpvaKEEq5eg93w15",
  "metadata": {
    "name": "sandwich_swap",
    "version": "0.1.0",
    "spec": "0.1.0",
    "description": "Created with Anchor"
  },
  "instructions": [
    {
      "name": "backrun_raydium_amm_swap_base_in",
      "discriminator": [
        120,
        164,
        247,
        225,
        164,
        139,
        110,
        154
      ],
      "accounts": [
        {
          "name": "token_program",
          "docs": [
            "token program"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "amm",
          "docs": [
            "CHECK Pair account"
          ],
          "writable": true
        },
        {
          "name": "amm_authority",
          "docs": [
            "Raydium Authority"
          ],
          "address": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
        },
        {
          "name": "amm_open_orders",
          "docs": [
            "CHECK Open Orders account"
          ],
          "writable": true
        },
        {
          "name": "amm_target_orders",
          "docs": [
            "CHECK Target Orders account"
          ],
          "writable": true
        },
        {
          "name": "pool_coin_token_account",
          "docs": [
            "Pool base token account"
          ],
          "writable": true
        },
        {
          "name": "pool_pc_token_account",
          "docs": [
            "Pool quote token account"
          ],
          "writable": true
        },
        {
          "name": "serum_program",
          "docs": [
            "OpenBook program id"
          ],
          "address": "srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX"
        },
        {
          "name": "serum_market",
          "docs": [
            "CHECK Serum market account"
          ],
          "writable": true
        },
        {
          "name": "serum_bids",
          "docs": [
            "CHECK Serum bids account"
          ],
          "writable": true
        },
        {
          "name": "serum_asks",
          "docs": [
            "CHECK Serum asks account"
          ],
          "writable": true
        },
        {
          "name": "serum_event_queue",
          "docs": [
            "CHECK Serum event queue account"
          ],
          "writable": true
        },
        {
          "name": "serum_coin_vault_account",
          "docs": [
            "Pool base token account"
          ],
          "writable": true
        },
        {
          "name": "serum_pc_vault_account",
          "docs": [
            "Pool quote token account"
          ],
          "writable": true
        },
        {
          "name": "serum_vault_signer",
          "docs": [
            "CHECK Serum vault signer account"
          ]
        },
        {
          "name": "user_source_token_account",
          "docs": [
            "User source token account"
          ],
          "writable": true
        },
        {
          "name": "user_target_token_account",
          "docs": [
            "User destination token account"
          ],
          "writable": true
        },
        {
          "name": "user_source_owner",
          "docs": [
            "The user making the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that stores sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        },
        {
          "name": "amm_program",
          "docs": [
            "AMM Program"
          ],
          "address": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
        },
        {
          "name": "base_mint",
          "docs": [
            "base mint"
          ]
        }
      ],
      "args": [
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    },
    {
      "name": "pump_backrun_buy",
      "discriminator": [
        71,
        78,
        225,
        13,
        228,
        199,
        145,
        226
      ],
      "accounts": [
        {
          "name": "pump_amm_program",
          "docs": [
            "The pump amm program"
          ],
          "address": "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA"
        },
        {
          "name": "pool",
          "writable": true
        },
        {
          "name": "user",
          "docs": [
            "The user making the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "global_config"
        },
        {
          "name": "base_mint",
          "docs": [
            "Base token mint (the token being bought or sold)"
          ]
        },
        {
          "name": "quote_mint",
          "docs": [
            "Quote token mint (typically a stablecoin or major token)"
          ]
        },
        {
          "name": "user_base_token_account",
          "docs": [
            "User's base token account"
          ],
          "writable": true
        },
        {
          "name": "user_quote_token_account",
          "docs": [
            "User's quote token account"
          ],
          "writable": true
        },
        {
          "name": "pool_base_token_account",
          "docs": [
            "Pool's base token account"
          ],
          "writable": true
        },
        {
          "name": "pool_quote_token_account",
          "docs": [
            "Pool's quote token account"
          ],
          "writable": true
        },
        {
          "name": "protocol_fee_recipient"
        },
        {
          "name": "protocol_fee_recipient_token_account",
          "writable": true
        },
        {
          "name": "base_token_program",
          "docs": [
            "Token program for the base token"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "quote_token_program",
          "docs": [
            "Token program for the quote token"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "system_program",
          "docs": [
            "System program"
          ],
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "associated_token_program",
          "docs": [
            "Associated token program"
          ],
          "address": "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          "name": "event_authority"
        },
        {
          "name": "program"
        },
        {
          "name": "coin_creator_vault_ata",
          "writable": true,
          "optional": true
        },
        {
          "name": "coin_creator_vault_authority",
          "optional": true
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that will store sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        }
      ],
      "args": []
    },
    {
      "name": "pump_backrun_sell",
      "discriminator": [
        136,
        137,
        165,
        173,
        174,
        2,
        179,
        85
      ],
      "accounts": [
        {
          "name": "pump_amm_program",
          "docs": [
            "The pump amm program"
          ],
          "address": "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA"
        },
        {
          "name": "pool",
          "writable": true
        },
        {
          "name": "user",
          "docs": [
            "The user making the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "global_config"
        },
        {
          "name": "base_mint",
          "docs": [
            "Base token mint (the token being bought or sold)"
          ]
        },
        {
          "name": "quote_mint",
          "docs": [
            "Quote token mint (typically a stablecoin or major token)"
          ]
        },
        {
          "name": "user_base_token_account",
          "docs": [
            "User's base token account"
          ],
          "writable": true
        },
        {
          "name": "user_quote_token_account",
          "docs": [
            "User's quote token account"
          ],
          "writable": true
        },
        {
          "name": "pool_base_token_account",
          "docs": [
            "Pool's base token account"
          ],
          "writable": true
        },
        {
          "name": "pool_quote_token_account",
          "docs": [
            "Pool's quote token account"
          ],
          "writable": true
        },
        {
          "name": "protocol_fee_recipient"
        },
        {
          "name": "protocol_fee_recipient_token_account",
          "writable": true
        },
        {
          "name": "base_token_program",
          "docs": [
            "Token program for the base token"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "quote_token_program",
          "docs": [
            "Token program for the quote token"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "system_program",
          "docs": [
            "System program"
          ],
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "associated_token_program",
          "docs": [
            "Associated token program"
          ],
          "address": "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          "name": "event_authority"
        },
        {
          "name": "program"
        },
        {
          "name": "coin_creator_vault_ata",
          "writable": true,
          "optional": true
        },
        {
          "name": "coin_creator_vault_authority",
          "optional": true
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that will store sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        }
      ],
      "args": []
    },
    {
      "name": "pump_frontrun_buy",
      "discriminator": [
        126,
        59,
        108,
        241,
        120,
        109,
        197,
        159
      ],
      "accounts": [
        {
          "name": "pump_amm_program",
          "docs": [
            "The pump amm program"
          ],
          "address": "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA"
        },
        {
          "name": "pool",
          "writable": true
        },
        {
          "name": "user",
          "docs": [
            "The user making the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "global_config"
        },
        {
          "name": "base_mint",
          "docs": [
            "Base token mint (the token being bought or sold)"
          ]
        },
        {
          "name": "quote_mint",
          "docs": [
            "Quote token mint (typically a stablecoin or major token)"
          ]
        },
        {
          "name": "user_base_token_account",
          "docs": [
            "User's base token account"
          ],
          "writable": true
        },
        {
          "name": "user_quote_token_account",
          "docs": [
            "User's quote token account"
          ],
          "writable": true
        },
        {
          "name": "pool_base_token_account",
          "docs": [
            "Pool's base token account"
          ],
          "writable": true
        },
        {
          "name": "pool_quote_token_account",
          "docs": [
            "Pool's quote token account"
          ],
          "writable": true
        },
        {
          "name": "protocol_fee_recipient"
        },
        {
          "name": "protocol_fee_recipient_token_account",
          "writable": true
        },
        {
          "name": "base_token_program",
          "docs": [
            "Token program for the base token"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "quote_token_program",
          "docs": [
            "Token program for the quote token"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "system_program",
          "docs": [
            "System program"
          ],
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "associated_token_program",
          "docs": [
            "Associated token program"
          ],
          "address": "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          "name": "event_authority"
        },
        {
          "name": "program"
        },
        {
          "name": "coin_creator_vault_ata",
          "writable": true,
          "optional": true
        },
        {
          "name": "coin_creator_vault_authority",
          "optional": true
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that will store sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "base_amount_out",
          "type": "u64"
        },
        {
          "name": "max_quote_amount_in",
          "type": "u64"
        },
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    },
    {
      "name": "pump_frontrun_sell",
      "discriminator": [
        215,
        1,
        232,
        144,
        139,
        79,
        94,
        104
      ],
      "accounts": [
        {
          "name": "pump_amm_program",
          "docs": [
            "The pump amm program"
          ],
          "address": "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA"
        },
        {
          "name": "pool",
          "writable": true
        },
        {
          "name": "user",
          "docs": [
            "The user making the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "global_config"
        },
        {
          "name": "base_mint",
          "docs": [
            "Base token mint (the token being bought or sold)"
          ]
        },
        {
          "name": "quote_mint",
          "docs": [
            "Quote token mint (typically a stablecoin or major token)"
          ]
        },
        {
          "name": "user_base_token_account",
          "docs": [
            "User's base token account"
          ],
          "writable": true
        },
        {
          "name": "user_quote_token_account",
          "docs": [
            "User's quote token account"
          ],
          "writable": true
        },
        {
          "name": "pool_base_token_account",
          "docs": [
            "Pool's base token account"
          ],
          "writable": true
        },
        {
          "name": "pool_quote_token_account",
          "docs": [
            "Pool's quote token account"
          ],
          "writable": true
        },
        {
          "name": "protocol_fee_recipient"
        },
        {
          "name": "protocol_fee_recipient_token_account",
          "writable": true
        },
        {
          "name": "base_token_program",
          "docs": [
            "Token program for the base token"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "quote_token_program",
          "docs": [
            "Token program for the quote token"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "system_program",
          "docs": [
            "System program"
          ],
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "associated_token_program",
          "docs": [
            "Associated token program"
          ],
          "address": "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          "name": "event_authority"
        },
        {
          "name": "program"
        },
        {
          "name": "coin_creator_vault_ata",
          "writable": true,
          "optional": true
        },
        {
          "name": "coin_creator_vault_authority",
          "optional": true
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that will store sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "base_amount_in",
          "type": "u64"
        },
        {
          "name": "min_quote_amount_out",
          "type": "u64"
        },
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    },
    {
      "name": "pumpfun_backrun_buy",
      "discriminator": [
        17,
        229,
        119,
        117,
        49,
        86,
        225,
        200
      ],
      "accounts": [
        {
          "name": "global"
        },
        {
          "name": "protocol_fee_recipient",
          "writable": true
        },
        {
          "name": "mint",
          "docs": [
            "Base token mint (the token being bought or sold)"
          ]
        },
        {
          "name": "bonding_curve",
          "writable": true
        },
        {
          "name": "bonding_curve_ata",
          "docs": [
            "Bonding curve token account"
          ],
          "writable": true
        },
        {
          "name": "user_ata",
          "docs": [
            "User token account"
          ],
          "writable": true
        },
        {
          "name": "user",
          "docs": [
            "The user making the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "docs": [
            "System program"
          ],
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "creator_fee_vault",
          "writable": true
        },
        {
          "name": "token_program",
          "docs": [
            "token program"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "event_authority"
        },
        {
          "name": "pump_program",
          "docs": [
            "The pump amm program"
          ],
          "address": "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that stores sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    },
    {
      "name": "pumpfun_frontrun_buy",
      "discriminator": [
        75,
        136,
        50,
        143,
        88,
        163,
        65,
        110
      ],
      "accounts": [
        {
          "name": "global"
        },
        {
          "name": "protocol_fee_recipient",
          "writable": true
        },
        {
          "name": "mint",
          "docs": [
            "Base token mint (the token being bought or sold)"
          ]
        },
        {
          "name": "bonding_curve",
          "writable": true
        },
        {
          "name": "bonding_curve_ata",
          "docs": [
            "Bonding curve token account"
          ],
          "writable": true
        },
        {
          "name": "user_ata",
          "docs": [
            "User token account"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "account",
                "path": "user"
              },
              {
                "kind": "const",
                "value": [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                "kind": "account",
                "path": "mint"
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          "name": "user",
          "docs": [
            "The user making the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "docs": [
            "System program"
          ],
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "token_program",
          "docs": [
            "token program"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "creator_fee_vault",
          "writable": true
        },
        {
          "name": "event_authority"
        },
        {
          "name": "pump_program",
          "docs": [
            "The pump fun program"
          ],
          "address": "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P"
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that will store sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        },
        {
          "name": "associated_token_program",
          "address": "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        }
      ],
      "args": [
        {
          "name": "target_base_amount_out",
          "type": "u64"
        },
        {
          "name": "target_max_quote_amount_in",
          "type": "u64"
        },
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    },
    {
      "name": "raydium_clmm_backrun_swap",
      "discriminator": [
        216,
        22,
        156,
        163,
        231,
        97,
        86,
        230
      ],
      "accounts": [
        {
          "name": "clmm_program",
          "address": "CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK"
        },
        {
          "name": "payer",
          "docs": [
            "The user performing the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "amm_config",
          "docs": [
            "The factory state to read protocol fees"
          ]
        },
        {
          "name": "pool_state",
          "docs": [
            "The program account of the pool in which the swap will be performed"
          ],
          "writable": true
        },
        {
          "name": "input_token_account",
          "docs": [
            "The user token account for input token (was output in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "output_token_account",
          "docs": [
            "The user token account for output token (was input in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "input_vault",
          "docs": [
            "The vault token account for input token (was output in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "output_vault",
          "docs": [
            "The vault token account for output token (was input in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "observation_state",
          "docs": [
            "The program account for the most recent oracle observation"
          ],
          "writable": true
        },
        {
          "name": "token_program",
          "docs": [
            "SPL program for token transfers"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "token_program_2022",
          "docs": [
            "SPL program 2022 for token transfers"
          ],
          "address": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          "name": "memo_program",
          "docs": [
            "memo program"
          ],
          "address": "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
        },
        {
          "name": "input_vault_mint",
          "docs": [
            "The mint of input token (was output in frontrun)"
          ]
        },
        {
          "name": "output_vault_mint",
          "docs": [
            "The mint of output token (was input in frontrun)"
          ]
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that stores sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    },
    {
      "name": "raydium_clmm_frontrun_swap",
      "discriminator": [
        101,
        89,
        161,
        33,
        143,
        209,
        156,
        137
      ],
      "accounts": [
        {
          "name": "clmm_program",
          "address": "CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK"
        },
        {
          "name": "payer",
          "docs": [
            "The user performing the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "amm_config",
          "docs": [
            "The factory state to read protocol fees"
          ]
        },
        {
          "name": "pool_state",
          "docs": [
            "The program account of the pool in which the swap will be performed"
          ],
          "writable": true
        },
        {
          "name": "input_token_account",
          "docs": [
            "The user token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_token_account",
          "docs": [
            "The user token account for output token"
          ],
          "writable": true
        },
        {
          "name": "input_vault",
          "docs": [
            "The vault token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_vault",
          "docs": [
            "The vault token account for output token"
          ],
          "writable": true
        },
        {
          "name": "observation_state",
          "docs": [
            "The program account for the most recent oracle observation"
          ],
          "writable": true
        },
        {
          "name": "token_program",
          "docs": [
            "SPL program for token transfers"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "token_program_2022",
          "docs": [
            "SPL program 2022 for token transfers"
          ],
          "address": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          "name": "memo_program",
          "docs": [
            "memo program"
          ],
          "address": "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
        },
        {
          "name": "input_vault_mint",
          "docs": [
            "The mint of input token"
          ]
        },
        {
          "name": "output_vault_mint",
          "docs": [
            "The mint of output token"
          ]
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that will store sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "target_amount",
          "type": "u64"
        },
        {
          "name": "target_other_amount_threshold",
          "type": "u64"
        },
        {
          "name": "target_sqrt_price_limit_x64",
          "type": "u128"
        },
        {
          "name": "target_is_base_input",
          "type": "bool"
        },
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    },
    {
      "name": "raydium_clmm_swap",
      "discriminator": [
        47,
        184,
        213,
        193,
        35,
        210,
        87,
        4
      ],
      "accounts": [
        {
          "name": "clmm_program",
          "address": "CAMMCzo5YL8w4VFF8KVHrK22GGUsp5VTaW7grrKgrWqK"
        },
        {
          "name": "payer",
          "docs": [
            "The user performing the swap"
          ],
          "signer": true
        },
        {
          "name": "amm_config",
          "docs": [
            "The factory state to read protocol fees"
          ]
        },
        {
          "name": "pool_state",
          "docs": [
            "The program account of the pool in which the swap will be performed"
          ],
          "writable": true
        },
        {
          "name": "input_token_account",
          "docs": [
            "The user token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_token_account",
          "docs": [
            "The user token account for output token"
          ],
          "writable": true
        },
        {
          "name": "input_vault",
          "docs": [
            "The vault token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_vault",
          "docs": [
            "The vault token account for output token"
          ],
          "writable": true
        },
        {
          "name": "observation_state",
          "docs": [
            "The program account for the most recent oracle observation"
          ],
          "writable": true
        },
        {
          "name": "token_program",
          "docs": [
            "SPL program for token transfers"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "token_program_2022",
          "docs": [
            "SPL program 2022 for token transfers"
          ],
          "address": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          "name": "memo_program",
          "docs": [
            "memo program"
          ],
          "address": "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
        },
        {
          "name": "input_vault_mint",
          "docs": [
            "The mint of token vault 0"
          ]
        },
        {
          "name": "output_vault_mint",
          "docs": [
            "The mint of token vault 1"
          ]
        }
      ],
      "args": [
        {
          "name": "amount",
          "type": "u64"
        },
        {
          "name": "other_amount_threshold",
          "type": "u64"
        },
        {
          "name": "sqrt_price_limit_x64",
          "type": "u128"
        },
        {
          "name": "is_base_input",
          "type": "bool"
        }
      ]
    },
    {
      "name": "raydium_cpmm_backrun_swap_base_input",
      "discriminator": [
        172,
        77,
        245,
        222,
        97,
        103,
        97,
        15
      ],
      "accounts": [
        {
          "name": "cp_swap_program",
          "address": "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
        },
        {
          "name": "payer",
          "docs": [
            "The user performing the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "authority",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        },
        {
          "name": "amm_config",
          "docs": [
            "The factory state to read protocol fees"
          ]
        },
        {
          "name": "pool_state",
          "docs": [
            "The program account of the pool in which the swap will be performed"
          ],
          "writable": true
        },
        {
          "name": "input_token_account",
          "docs": [
            "The user token account for input token (was output in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "output_token_account",
          "docs": [
            "The user token account for output token (was input in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "input_vault",
          "docs": [
            "The vault token account for input token (was output in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "output_vault",
          "docs": [
            "The vault token account for output token (was input in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "input_token_program",
          "docs": [
            "SPL program for input token transfers"
          ]
        },
        {
          "name": "output_token_program",
          "docs": [
            "SPL program for output token transfers"
          ]
        },
        {
          "name": "input_token_mint",
          "docs": [
            "The mint of input token (was output in frontrun)"
          ]
        },
        {
          "name": "output_token_mint",
          "docs": [
            "The mint of output token (was input in frontrun)"
          ]
        },
        {
          "name": "observation_state",
          "docs": [
            "The program account for the most recent oracle observation"
          ],
          "writable": true
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that stores sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    },
    {
      "name": "raydium_cpmm_backrun_swap_base_output",
      "discriminator": [
        11,
        238,
        214,
        82,
        87,
        83,
        186,
        53
      ],
      "accounts": [
        {
          "name": "cp_swap_program",
          "address": "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
        },
        {
          "name": "payer",
          "docs": [
            "The user performing the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "authority",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        },
        {
          "name": "amm_config",
          "docs": [
            "The factory state to read protocol fees"
          ]
        },
        {
          "name": "pool_state",
          "docs": [
            "The program account of the pool in which the swap will be performed"
          ],
          "writable": true
        },
        {
          "name": "input_token_account",
          "docs": [
            "The user token account for input token (was output in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "output_token_account",
          "docs": [
            "The user token account for output token (was input in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "input_vault",
          "docs": [
            "The vault token account for input token (was output in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "output_vault",
          "docs": [
            "The vault token account for output token (was input in frontrun)"
          ],
          "writable": true
        },
        {
          "name": "input_token_program",
          "docs": [
            "SPL program for input token transfers"
          ]
        },
        {
          "name": "output_token_program",
          "docs": [
            "SPL program for output token transfers"
          ]
        },
        {
          "name": "input_token_mint",
          "docs": [
            "The mint of input token (was output in frontrun)"
          ]
        },
        {
          "name": "output_token_mint",
          "docs": [
            "The mint of output token (was input in frontrun)"
          ]
        },
        {
          "name": "observation_state",
          "docs": [
            "The program account for the most recent oracle observation"
          ],
          "writable": true
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that stores sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        }
      ],
      "args": [
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    },
    {
      "name": "raydium_cpmm_frontrun_swap_base_input",
      "discriminator": [
        192,
        41,
        123,
        249,
        159,
        48,
        12,
        184
      ],
      "accounts": [
        {
          "name": "cp_swap_program",
          "address": "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
        },
        {
          "name": "payer",
          "docs": [
            "The user performing the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "authority",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        },
        {
          "name": "amm_config",
          "docs": [
            "The factory state to read protocol fees"
          ]
        },
        {
          "name": "pool_state",
          "docs": [
            "The program account of the pool in which the swap will be performed"
          ],
          "writable": true
        },
        {
          "name": "input_token_account",
          "docs": [
            "The user token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_token_account",
          "docs": [
            "The user token account for output token"
          ],
          "writable": true
        },
        {
          "name": "input_vault",
          "docs": [
            "The vault token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_vault",
          "docs": [
            "The vault token account for output token"
          ],
          "writable": true
        },
        {
          "name": "input_token_program",
          "docs": [
            "SPL program for input token transfers"
          ]
        },
        {
          "name": "output_token_program",
          "docs": [
            "SPL program for output token transfers"
          ]
        },
        {
          "name": "input_token_mint",
          "docs": [
            "The mint of input token"
          ]
        },
        {
          "name": "output_token_mint",
          "docs": [
            "The mint of output token"
          ]
        },
        {
          "name": "observation_state",
          "docs": [
            "The program account for the most recent oracle observation"
          ],
          "writable": true
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that will store sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "target_amount_in",
          "type": "u64"
        },
        {
          "name": "target_minimum_amount_out",
          "type": "u64"
        },
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    },
    {
      "name": "raydium_cpmm_frontrun_swap_base_output",
      "discriminator": [
        160,
        254,
        238,
        129,
        3,
        229,
        2,
        160
      ],
      "accounts": [
        {
          "name": "cp_swap_program",
          "address": "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
        },
        {
          "name": "payer",
          "docs": [
            "The user performing the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "authority",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        },
        {
          "name": "amm_config",
          "docs": [
            "The factory state to read protocol fees"
          ]
        },
        {
          "name": "pool_state",
          "docs": [
            "The program account of the pool in which the swap will be performed"
          ],
          "writable": true
        },
        {
          "name": "input_token_account",
          "docs": [
            "The user token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_token_account",
          "docs": [
            "The user token account for output token"
          ],
          "writable": true
        },
        {
          "name": "input_vault",
          "docs": [
            "The vault token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_vault",
          "docs": [
            "The vault token account for output token"
          ],
          "writable": true
        },
        {
          "name": "input_token_program",
          "docs": [
            "SPL program for input token transfers"
          ]
        },
        {
          "name": "output_token_program",
          "docs": [
            "SPL program for output token transfers"
          ]
        },
        {
          "name": "input_token_mint",
          "docs": [
            "The mint of input token"
          ]
        },
        {
          "name": "output_token_mint",
          "docs": [
            "The mint of output token"
          ]
        },
        {
          "name": "observation_state",
          "docs": [
            "The program account for the most recent oracle observation"
          ],
          "writable": true
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that will store sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "target_max_amount_in",
          "type": "u64"
        },
        {
          "name": "target_amount_out",
          "type": "u64"
        },
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    },
    {
      "name": "raydium_cpmm_swap_base_input",
      "discriminator": [
        97,
        220,
        92,
        60,
        120,
        253,
        67,
        137
      ],
      "accounts": [
        {
          "name": "cp_swap_program",
          "address": "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
        },
        {
          "name": "payer",
          "docs": [
            "The user performing the swap"
          ],
          "signer": true
        },
        {
          "name": "authority",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        },
        {
          "name": "amm_config",
          "docs": [
            "The factory state to read protocol fees"
          ]
        },
        {
          "name": "pool_state",
          "docs": [
            "The program account of the pool in which the swap will be performed"
          ],
          "writable": true
        },
        {
          "name": "input_token_account",
          "docs": [
            "The user token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_token_account",
          "docs": [
            "The user token account for output token"
          ],
          "writable": true
        },
        {
          "name": "input_vault",
          "docs": [
            "The vault token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_vault",
          "docs": [
            "The vault token account for output token"
          ],
          "writable": true
        },
        {
          "name": "input_token_program",
          "docs": [
            "SPL program for input token transfers"
          ]
        },
        {
          "name": "output_token_program",
          "docs": [
            "SPL program for output token transfers"
          ]
        },
        {
          "name": "input_token_mint",
          "docs": [
            "The mint of input token"
          ]
        },
        {
          "name": "output_token_mint",
          "docs": [
            "The mint of output token"
          ]
        },
        {
          "name": "observation_state",
          "docs": [
            "The program account for the most recent oracle observation"
          ],
          "writable": true
        }
      ],
      "args": [
        {
          "name": "amount_in",
          "type": "u64"
        },
        {
          "name": "minimum_amount_out",
          "type": "u64"
        }
      ]
    },
    {
      "name": "raydium_cpmm_swap_base_output",
      "discriminator": [
        33,
        179,
        228,
        235,
        34,
        25,
        149,
        37
      ],
      "accounts": [
        {
          "name": "cp_swap_program",
          "address": "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
        },
        {
          "name": "payer",
          "docs": [
            "The user performing the swap"
          ],
          "signer": true
        },
        {
          "name": "authority",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  118,
                  97,
                  117,
                  108,
                  116,
                  95,
                  97,
                  110,
                  100,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  95,
                  115,
                  101,
                  101,
                  100
                ]
              }
            ],
            "program": {
              "kind": "account",
              "path": "cp_swap_program"
            }
          }
        },
        {
          "name": "amm_config",
          "docs": [
            "The factory state to read protocol fees"
          ]
        },
        {
          "name": "pool_state",
          "docs": [
            "The program account of the pool in which the swap will be performed"
          ],
          "writable": true
        },
        {
          "name": "input_token_account",
          "docs": [
            "The user token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_token_account",
          "docs": [
            "The user token account for output token"
          ],
          "writable": true
        },
        {
          "name": "input_vault",
          "docs": [
            "The vault token account for input token"
          ],
          "writable": true
        },
        {
          "name": "output_vault",
          "docs": [
            "The vault token account for output token"
          ],
          "writable": true
        },
        {
          "name": "input_token_program",
          "docs": [
            "SPL program for input token transfers"
          ]
        },
        {
          "name": "output_token_program",
          "docs": [
            "SPL program for output token transfers"
          ]
        },
        {
          "name": "input_token_mint",
          "docs": [
            "The mint of input token"
          ]
        },
        {
          "name": "output_token_mint",
          "docs": [
            "The mint of output token"
          ]
        },
        {
          "name": "observation_state",
          "docs": [
            "The program account for the most recent oracle observation"
          ],
          "writable": true
        }
      ],
      "args": [
        {
          "name": "max_amount_in",
          "type": "u64"
        },
        {
          "name": "amount_out",
          "type": "u64"
        }
      ]
    },
    {
      "name": "raydium_frontrun_amm_swap_base_in",
      "discriminator": [
        55,
        130,
        217,
        155,
        4,
        150,
        97,
        48
      ],
      "accounts": [
        {
          "name": "token_program",
          "docs": [
            "token program"
          ],
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "amm",
          "docs": [
            "CHECK Pair account"
          ],
          "writable": true
        },
        {
          "name": "amm_authority",
          "docs": [
            "Raydium Authority"
          ],
          "address": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
        },
        {
          "name": "amm_open_orders",
          "docs": [
            "CHECK Open Orders account"
          ],
          "writable": true
        },
        {
          "name": "amm_target_orders",
          "docs": [
            "CHECK Target Orders account"
          ],
          "writable": true
        },
        {
          "name": "pool_coin_token_account",
          "docs": [
            "Pool base token account"
          ],
          "writable": true
        },
        {
          "name": "pool_pc_token_account",
          "docs": [
            "Pool quote token account"
          ],
          "writable": true
        },
        {
          "name": "serum_program",
          "docs": [
            "OpenBook program id"
          ],
          "address": "srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX"
        },
        {
          "name": "serum_market",
          "docs": [
            "CHECK Serum market account"
          ],
          "writable": true
        },
        {
          "name": "serum_bids",
          "docs": [
            "CHECK Serum bids account"
          ],
          "writable": true
        },
        {
          "name": "serum_asks",
          "docs": [
            "CHECK Serum asks account"
          ],
          "writable": true
        },
        {
          "name": "serum_event_queue",
          "docs": [
            "CHECK Serum event queue account"
          ],
          "writable": true
        },
        {
          "name": "serum_coin_vault_account",
          "docs": [
            "Pool base token account"
          ],
          "writable": true
        },
        {
          "name": "serum_pc_vault_account",
          "docs": [
            "Pool quote token account"
          ],
          "writable": true
        },
        {
          "name": "serum_vault_signer",
          "docs": [
            "CHECK Serum vault signer account"
          ]
        },
        {
          "name": "user_source_token_account",
          "docs": [
            "User source token account"
          ],
          "writable": true
        },
        {
          "name": "user_target_token_account",
          "docs": [
            "User destination token account"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "account",
                "path": "user_source_owner"
              },
              {
                "kind": "const",
                "value": [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                "kind": "account",
                "path": "base_mint"
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          "name": "user_source_owner",
          "docs": [
            "The user making the swap"
          ],
          "writable": true,
          "signer": true
        },
        {
          "name": "sandwich_state",
          "docs": [
            "The account that will store sandwich state"
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  97,
                  110,
                  100,
                  119,
                  105,
                  99,
                  104
                ]
              },
              {
                "kind": "arg",
                "path": "sandwich_id"
              }
            ]
          }
        },
        {
          "name": "associated_token_program",
          "address": "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          "name": "system_program",
          "docs": [
            "System program"
          ],
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "amm_program",
          "docs": [
            "AMM Program"
          ],
          "address": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
        },
        {
          "name": "base_mint",
          "docs": [
            "base mint"
          ]
        }
      ],
      "args": [
        {
          "name": "target_amount_in",
          "type": "u64"
        },
        {
          "name": "target_minimum_amount_out",
          "type": "u64"
        },
        {
          "name": "sandwich_id",
          "type": "string"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "BondingCurveState",
      "discriminator": [
        182,
        185,
        75,
        193,
        72,
        40,
        132,
        153
      ]
    },
    {
      "name": "ClmmAmmConfig",
      "discriminator": [
        75,
        211,
        86,
        87,
        158,
        94,
        26,
        117
      ]
    },
    {
      "name": "ClmmObservationState",
      "discriminator": [
        224,
        11,
        155,
        151,
        110,
        143,
        131,
        4
      ]
    },
    {
      "name": "ClmmPoolState",
      "discriminator": [
        72,
        5,
        179,
        44,
        85,
        39,
        26,
        234
      ]
    },
    {
      "name": "CpmmAmmConfig",
      "discriminator": [
        180,
        18,
        220,
        90,
        185,
        126,
        222,
        203
      ]
    },
    {
      "name": "CpmmObservationState",
      "discriminator": [
        140,
        213,
        126,
        28,
        83,
        5,
        26,
        214
      ]
    },
    {
      "name": "CpmmPoolState",
      "discriminator": [
        81,
        44,
        118,
        112,
        96,
        110,
        218,
        212
      ]
    },
    {
      "name": "ProgramAccount",
      "discriminator": [
        19,
        199,
        219,
        91,
        104,
        24,
        64,
        141
      ]
    },
    {
      "name": "PumpSwapGlobalConfig",
      "discriminator": [
        6,
        52,
        30,
        226,
        123,
        90,
        227,
        249
      ]
    },
    {
      "name": "PumpSwapPoolState",
      "discriminator": [
        38,
        12,
        155,
        86,
        169,
        114,
        38,
        68
      ]
    },
    {
      "name": "SandwichState",
      "discriminator": [
        204,
        118,
        143,
        146,
        43,
        154,
        22,
        171
      ]
    }
  ],
  "events": [
    {
      "name": "SandwichCompleteEvent",
      "discriminator": [
        253,
        26,
        50,
        10,
        15,
        248,
        59,
        132
      ]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "NotApproved",
      "msg": "Not approved"
    },
    {
      "code": 6001,
      "name": "InvalidOwner",
      "msg": "Input account owner is not the program address"
    },
    {
      "code": 6002,
      "name": "EmptySupply",
      "msg": "Input token account empty"
    },
    {
      "code": 6003,
      "name": "InvalidInput",
      "msg": "InvalidInput"
    },
    {
      "code": 6004,
      "name": "IncorrectLpMint",
      "msg": "Address of the provided lp token mint is incorrect"
    },
    {
      "code": 6005,
      "name": "ExceededSlippage",
      "msg": "Exceeds desired slippage limit"
    },
    {
      "code": 6006,
      "name": "ZeroTradingTokens",
      "msg": "Given pool token amount results in zero trading tokens"
    },
    {
      "code": 6007,
      "name": "NotSupportMint",
      "msg": "Not support token_2022 mint extension"
    },
    {
      "code": 6008,
      "name": "InvalidVault",
      "msg": "invaild vault"
    },
    {
      "code": 6009,
      "name": "InitLpAmountTooLess",
      "msg": "Init lp amount is too less(Because 100 amount lp will be locked)"
    },
    {
      "code": 6010,
      "name": "CalculationFailure",
      "msg": "Calculation failed due to overflow or division by zero"
    },
    {
      "code": 6011,
      "name": "InsufficientSandwichAmount",
      "msg": "Calculated sandwich amount is too small to be profitable"
    },
    {
      "code": 6012,
      "name": "SandwichAlreadyCompleted",
      "msg": "Sandwich already completed"
    },
    {
      "code": 6013,
      "name": "UnprofitableSandwich",
      "msg": "Sandwich unprofitable"
    },
    {
      "code": 6014,
      "name": "TokenMintMismatch",
      "msg": "Input and output token Mismatch"
    }
  ],
  "types": [
    {
      "name": "BondingCurveState",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "virtual_token_reserves",
            "type": "u64"
          },
          {
            "name": "virtual_sol_reserves",
            "type": "u64"
          },
          {
            "name": "real_token_reserves",
            "type": "u64"
          },
          {
            "name": "real_sol_reserves",
            "type": "u64"
          },
          {
            "name": "token_total_supply",
            "type": "u64"
          },
          {
            "name": "complete",
            "type": "bool"
          },
          {
            "name": "creator",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "ClmmAmmConfig",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "docs": [
              "Bump to identify PDA"
            ],
            "type": "u8"
          },
          {
            "name": "index",
            "type": "u16"
          },
          {
            "name": "owner",
            "docs": [
              "Address of the protocol owner"
            ],
            "type": "pubkey"
          },
          {
            "name": "protocol_fee_rate",
            "docs": [
              "The protocol fee"
            ],
            "type": "u32"
          },
          {
            "name": "trade_fee_rate",
            "docs": [
              "The trade fee, denominated in hundredths of a bip (10^-6)"
            ],
            "type": "u32"
          },
          {
            "name": "tick_spacing",
            "docs": [
              "The tick spacing"
            ],
            "type": "u16"
          },
          {
            "name": "fund_fee_rate",
            "docs": [
              "The fund fee, denominated in hundredths of a bip (10^-6)"
            ],
            "type": "u32"
          },
          {
            "name": "padding_u32",
            "type": "u32"
          },
          {
            "name": "fund_owner",
            "type": "pubkey"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u64",
                3
              ]
            }
          }
        ]
      }
    },
    {
      "name": "ClmmObservation",
      "docs": [
        "The element of observations in ObservationState"
      ],
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "block_timestamp",
            "docs": [
              "The block timestamp of the observation"
            ],
            "type": "u32"
          },
          {
            "name": "sqrt_price_x64",
            "docs": [
              "the price of the observation timestamp, Q64.64"
            ],
            "type": "u128"
          },
          {
            "name": "cumulative_time_price_x64",
            "docs": [
              "the cumulative of price during the duration time, Q64.64"
            ],
            "type": "u128"
          },
          {
            "name": "padding",
            "docs": [
              "padding for feature update"
            ],
            "type": "u128"
          }
        ]
      }
    },
    {
      "name": "ClmmObservationState",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "initialized",
            "docs": [
              "Whether the ObservationState is initialized"
            ],
            "type": "bool"
          },
          {
            "name": "pool_id",
            "type": "pubkey"
          },
          {
            "name": "observations",
            "docs": [
              "observation array"
            ],
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "ClmmObservation"
                  }
                },
                1000
              ]
            }
          },
          {
            "name": "padding",
            "docs": [
              "padding for feature update"
            ],
            "type": {
              "array": [
                "u128",
                5
              ]
            }
          }
        ]
      }
    },
    {
      "name": "ClmmPoolState",
      "docs": [
        "The pool state",
        "",
        "PDA of `[POOL_SEED, config, token_mint_0, token_mint_1]`",
        ""
      ],
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "docs": [
              "Bump to identify PDA"
            ],
            "type": {
              "array": [
                "u8",
                1
              ]
            }
          },
          {
            "name": "amm_config",
            "type": "pubkey"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "token_mint_0",
            "docs": [
              "Token pair of the pool, where token_mint_0 address < token_mint_1 address"
            ],
            "type": "pubkey"
          },
          {
            "name": "token_mint_1",
            "type": "pubkey"
          },
          {
            "name": "token_vault_0",
            "docs": [
              "Token pair vault"
            ],
            "type": "pubkey"
          },
          {
            "name": "token_vault_1",
            "type": "pubkey"
          },
          {
            "name": "observation_key",
            "docs": [
              "observation account key"
            ],
            "type": "pubkey"
          },
          {
            "name": "mint_decimals_0",
            "docs": [
              "mint0 and mint1 decimals"
            ],
            "type": "u8"
          },
          {
            "name": "mint_decimals_1",
            "type": "u8"
          },
          {
            "name": "tick_spacing",
            "docs": [
              "The minimum number of ticks between initialized ticks"
            ],
            "type": "u16"
          },
          {
            "name": "liquidity",
            "docs": [
              "The currently in range liquidity available to the pool."
            ],
            "type": "u128"
          },
          {
            "name": "sqrt_price_x64",
            "docs": [
              "The current price of the pool as a sqrt(token_1/token_0) Q64.64 value"
            ],
            "type": "u128"
          },
          {
            "name": "tick_current",
            "docs": [
              "The current tick of the pool, i.e. according to the last tick transition that was run."
            ],
            "type": "i32"
          },
          {
            "name": "observation_index",
            "docs": [
              "the most-recently updated index of the observations array"
            ],
            "type": "u16"
          },
          {
            "name": "observation_update_duration",
            "type": "u16"
          },
          {
            "name": "fee_growth_global_0_x64",
            "docs": [
              "The fee growth as a Q64.64 number, i.e. fees of token_0 and token_1 collected per",
              "unit of liquidity for the entire life of the pool."
            ],
            "type": "u128"
          },
          {
            "name": "fee_growth_global_1_x64",
            "type": "u128"
          },
          {
            "name": "protocol_fees_token_0",
            "docs": [
              "The amounts of token_0 and token_1 that are owed to the protocol."
            ],
            "type": "u64"
          },
          {
            "name": "protocol_fees_token_1",
            "type": "u64"
          },
          {
            "name": "swap_in_amount_token_0",
            "docs": [
              "The amounts in and out of swap token_0 and token_1"
            ],
            "type": "u128"
          },
          {
            "name": "swap_out_amount_token_1",
            "type": "u128"
          },
          {
            "name": "swap_in_amount_token_1",
            "type": "u128"
          },
          {
            "name": "swap_out_amount_token_0",
            "type": "u128"
          },
          {
            "name": "status",
            "docs": [
              "Bitwise representation of the state of the pool",
              "bit0, 1: disable open position and increase liquidity, 0: normal",
              "bit1, 1: disable decrease liquidity, 0: normal",
              "bit2, 1: disable collect fee, 0: normal",
              "bit3, 1: disable collect reward, 0: normal",
              "bit4, 1: disable swap, 0: normal"
            ],
            "type": "u8"
          },
          {
            "name": "padding",
            "docs": [
              "Leave blank for future use"
            ],
            "type": {
              "array": [
                "u8",
                7
              ]
            }
          },
          {
            "name": "reward_infos",
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "RewardInfo"
                  }
                },
                3
              ]
            }
          },
          {
            "name": "tick_array_bitmap",
            "docs": [
              "Packed initialized tick array state"
            ],
            "type": {
              "array": [
                "u64",
                16
              ]
            }
          },
          {
            "name": "total_fees_token_0",
            "docs": [
              "except protocol_fee and fund_fee"
            ],
            "type": "u64"
          },
          {
            "name": "total_fees_claimed_token_0",
            "docs": [
              "except protocol_fee and fund_fee"
            ],
            "type": "u64"
          },
          {
            "name": "total_fees_token_1",
            "type": "u64"
          },
          {
            "name": "total_fees_claimed_token_1",
            "type": "u64"
          },
          {
            "name": "fund_fees_token_0",
            "type": "u64"
          },
          {
            "name": "fund_fees_token_1",
            "type": "u64"
          },
          {
            "name": "open_time",
            "type": "u64"
          },
          {
            "name": "padding1",
            "type": {
              "array": [
                "u64",
                25
              ]
            }
          },
          {
            "name": "padding2",
            "type": {
              "array": [
                "u64",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "CpmmAmmConfig",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "docs": [
              "Bump to identify PDA"
            ],
            "type": "u8"
          },
          {
            "name": "disable_create_pool",
            "docs": [
              "Status to control if new pool can be create"
            ],
            "type": "bool"
          },
          {
            "name": "index",
            "docs": [
              "Config index"
            ],
            "type": "u16"
          },
          {
            "name": "trade_fee_rate",
            "docs": [
              "The trade fee, denominated in hundredths of a bip (10^-6)"
            ],
            "type": "u64"
          },
          {
            "name": "protocol_fee_rate",
            "docs": [
              "The protocol fee"
            ],
            "type": "u64"
          },
          {
            "name": "fund_fee_rate",
            "docs": [
              "The fund fee, denominated in hundredths of a bip (10^-6)"
            ],
            "type": "u64"
          },
          {
            "name": "create_pool_fee",
            "docs": [
              "Fee for create a new pool"
            ],
            "type": "u64"
          },
          {
            "name": "protocol_owner",
            "docs": [
              "Address of the protocol fee owner"
            ],
            "type": "pubkey"
          },
          {
            "name": "fund_owner",
            "docs": [
              "Address of the fund fee owner"
            ],
            "type": "pubkey"
          },
          {
            "name": "padding",
            "docs": [
              "padding"
            ],
            "type": {
              "array": [
                "u64",
                16
              ]
            }
          }
        ]
      }
    },
    {
      "name": "CpmmObservation",
      "docs": [
        "The element of observations in ObservationState"
      ],
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "block_timestamp",
            "docs": [
              "The block timestamp of the observation"
            ],
            "type": "u64"
          },
          {
            "name": "cumulative_token_0_price_x32",
            "docs": [
              "the cumulative of token0 price during the duration time, Q32.32, the remaining 64 bit for overflow"
            ],
            "type": "u128"
          },
          {
            "name": "cumulative_token_1_price_x32",
            "docs": [
              "the cumulative of token1 price during the duration time, Q32.32, the remaining 64 bit for overflow"
            ],
            "type": "u128"
          }
        ]
      }
    },
    {
      "name": "CpmmObservationState",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "initialized",
            "docs": [
              "Whether the ObservationState is initialized"
            ],
            "type": "bool"
          },
          {
            "name": "observation_index",
            "docs": [
              "the most-recently updated index of the observations array"
            ],
            "type": "u16"
          },
          {
            "name": "pool_id",
            "type": "pubkey"
          },
          {
            "name": "observations",
            "docs": [
              "observation array"
            ],
            "type": {
              "array": [
                {
                  "defined": {
                    "name": "CpmmObservation"
                  }
                },
                100
              ]
            }
          },
          {
            "name": "padding",
            "docs": [
              "padding for feature update"
            ],
            "type": {
              "array": [
                "u64",
                4
              ]
            }
          }
        ]
      }
    },
    {
      "name": "CpmmPoolState",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "amm_config",
            "docs": [
              "Which config the pool belongs"
            ],
            "type": "pubkey"
          },
          {
            "name": "pool_creator",
            "docs": [
              "pool creator"
            ],
            "type": "pubkey"
          },
          {
            "name": "token_0_vault",
            "docs": [
              "Token A"
            ],
            "type": "pubkey"
          },
          {
            "name": "token_1_vault",
            "docs": [
              "Token B"
            ],
            "type": "pubkey"
          },
          {
            "name": "lp_mint",
            "docs": [
              "Pool tokens are issued when A or B tokens are deposited.",
              "Pool tokens can be withdrawn back to the original A or B token."
            ],
            "type": "pubkey"
          },
          {
            "name": "token_0_mint",
            "docs": [
              "Mint information for token A"
            ],
            "type": "pubkey"
          },
          {
            "name": "token_1_mint",
            "docs": [
              "Mint information for token B"
            ],
            "type": "pubkey"
          },
          {
            "name": "token_0_program",
            "docs": [
              "token_0 program"
            ],
            "type": "pubkey"
          },
          {
            "name": "token_1_program",
            "docs": [
              "token_1 program"
            ],
            "type": "pubkey"
          },
          {
            "name": "observation_key",
            "docs": [
              "observation account to store oracle data"
            ],
            "type": "pubkey"
          },
          {
            "name": "auth_bump",
            "type": "u8"
          },
          {
            "name": "status",
            "docs": [
              "Bitwise representation of the state of the pool",
              "bit0, 1: disable deposit(vaule is 1), 0: normal",
              "bit1, 1: disable withdraw(vaule is 2), 0: normal",
              "bit2, 1: disable swap(vaule is 4), 0: normal"
            ],
            "type": "u8"
          },
          {
            "name": "lp_mint_decimals",
            "type": "u8"
          },
          {
            "name": "mint_0_decimals",
            "docs": [
              "mint0 and mint1 decimals"
            ],
            "type": "u8"
          },
          {
            "name": "mint_1_decimals",
            "type": "u8"
          },
          {
            "name": "lp_supply",
            "docs": [
              "lp mint supply"
            ],
            "type": "u64"
          },
          {
            "name": "protocol_fees_token_0",
            "docs": [
              "The amounts of token_0 and token_1 that are owed to the liquidity provider."
            ],
            "type": "u64"
          },
          {
            "name": "protocol_fees_token_1",
            "type": "u64"
          },
          {
            "name": "fund_fees_token_0",
            "type": "u64"
          },
          {
            "name": "fund_fees_token_1",
            "type": "u64"
          },
          {
            "name": "open_time",
            "docs": [
              "The timestamp allowed for swap in the pool."
            ],
            "type": "u64"
          },
          {
            "name": "padding",
            "docs": [
              "padding for future updates"
            ],
            "type": {
              "array": [
                "u64",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "ProgramAccount",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "nonce",
            "type": "u64"
          },
          {
            "name": "max_order",
            "type": "u64"
          },
          {
            "name": "depth",
            "type": "u64"
          },
          {
            "name": "base_decimal",
            "type": "u64"
          },
          {
            "name": "quote_decimal",
            "type": "u64"
          },
          {
            "name": "state",
            "type": "u64"
          },
          {
            "name": "reset_flag",
            "type": "u64"
          },
          {
            "name": "min_size",
            "type": "u64"
          },
          {
            "name": "vol_max_cut_ratio",
            "type": "u64"
          },
          {
            "name": "amount_wave_ratio",
            "type": "u64"
          },
          {
            "name": "base_lot_size",
            "type": "u64"
          },
          {
            "name": "quote_lot_size",
            "type": "u64"
          },
          {
            "name": "min_price_multiplier",
            "type": "u64"
          },
          {
            "name": "max_price_multiplier",
            "type": "u64"
          },
          {
            "name": "system_decimal_value",
            "type": "u64"
          },
          {
            "name": "min_separate_numerator",
            "type": "u64"
          },
          {
            "name": "min_separate_denominator",
            "type": "u64"
          },
          {
            "name": "trade_fee_numerator",
            "type": "u64"
          },
          {
            "name": "trade_fee_denominator",
            "type": "u64"
          },
          {
            "name": "pnl_numerator",
            "type": "u64"
          },
          {
            "name": "pnl_denominator",
            "type": "u64"
          },
          {
            "name": "swap_fee_numerator",
            "type": "u64"
          },
          {
            "name": "swap_fee_denominator",
            "type": "u64"
          },
          {
            "name": "base_need_take_pnl",
            "type": "u64"
          },
          {
            "name": "quote_need_take_pnl",
            "type": "u64"
          },
          {
            "name": "quote_total_pnl",
            "type": "u64"
          },
          {
            "name": "base_total_pnl",
            "type": "u64"
          },
          {
            "name": "pool_open_time",
            "type": "u64"
          },
          {
            "name": "punish_pc_amount",
            "type": "u64"
          },
          {
            "name": "punish_coin_amount",
            "type": "u64"
          },
          {
            "name": "orderbook_to_init_time",
            "type": "u64"
          },
          {
            "name": "swap_base_in_amount",
            "type": "u128"
          },
          {
            "name": "swap_quote_out_amount",
            "type": "u128"
          },
          {
            "name": "swap_base2_quote_fee",
            "type": "u64"
          },
          {
            "name": "swap_quote_in_amount",
            "type": "u128"
          },
          {
            "name": "swap_base_out_amount",
            "type": "u128"
          },
          {
            "name": "swap_quote2_base_fee",
            "type": "u64"
          },
          {
            "name": "base_vault",
            "type": "pubkey"
          },
          {
            "name": "quote_vault",
            "type": "pubkey"
          },
          {
            "name": "base_mint",
            "type": "pubkey"
          },
          {
            "name": "quote_mint",
            "type": "pubkey"
          },
          {
            "name": "lp_mint",
            "type": "pubkey"
          },
          {
            "name": "open_orders",
            "type": "pubkey"
          },
          {
            "name": "market_id",
            "type": "pubkey"
          },
          {
            "name": "market_program_id",
            "type": "pubkey"
          },
          {
            "name": "target_orders",
            "type": "pubkey"
          },
          {
            "name": "withdraw_queue",
            "type": "pubkey"
          },
          {
            "name": "lp_vault",
            "type": "pubkey"
          },
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "lp_reserve",
            "type": "u64"
          },
          {
            "name": "padding",
            "type": {
              "array": [
                "u64",
                3
              ]
            }
          }
        ]
      }
    },
    {
      "name": "PumpSwapGlobalConfig",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "admin",
            "type": "pubkey"
          },
          {
            "name": "lp_fee_basis_points",
            "type": "u64"
          },
          {
            "name": "protocol_fee_basis_points",
            "type": "u64"
          },
          {
            "name": "disable_flags",
            "type": "u8"
          },
          {
            "name": "protocol_fee_recipients",
            "type": {
              "array": [
                "pubkey",
                8
              ]
            }
          },
          {
            "name": "coin_creator_fee_basis_points",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "PumpSwapPoolState",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "pool_bump",
            "type": "u8"
          },
          {
            "name": "index",
            "type": "u16"
          },
          {
            "name": "creator",
            "type": "pubkey"
          },
          {
            "name": "base_mint",
            "type": "pubkey"
          },
          {
            "name": "quote_mint",
            "type": "pubkey"
          },
          {
            "name": "lp_mint",
            "type": "pubkey"
          },
          {
            "name": "pool_base_token_account",
            "type": "pubkey"
          },
          {
            "name": "pool_quote_token_account",
            "type": "pubkey"
          },
          {
            "name": "lp_supply",
            "type": "u64"
          },
          {
            "name": "coin_creator",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "RewardInfo",
      "serialization": "bytemuckunsafe",
      "repr": {
        "kind": "c",
        "packed": true
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "reward_state",
            "docs": [
              "Reward state"
            ],
            "type": "u8"
          },
          {
            "name": "open_time",
            "docs": [
              "Reward open time"
            ],
            "type": "u64"
          },
          {
            "name": "end_time",
            "docs": [
              "Reward end time"
            ],
            "type": "u64"
          },
          {
            "name": "last_update_time",
            "docs": [
              "Reward last update time"
            ],
            "type": "u64"
          },
          {
            "name": "emissions_per_second_x64",
            "docs": [
              "Q64.64 number indicates how many tokens per second are earned per unit of liquidity."
            ],
            "type": "u128"
          },
          {
            "name": "reward_total_emissioned",
            "docs": [
              "The total amount of reward emissioned"
            ],
            "type": "u64"
          },
          {
            "name": "reward_claimed",
            "docs": [
              "The total amount of claimed reward"
            ],
            "type": "u64"
          },
          {
            "name": "token_mint",
            "docs": [
              "Reward token mint."
            ],
            "type": "pubkey"
          },
          {
            "name": "token_vault",
            "docs": [
              "Reward vault token account."
            ],
            "type": "pubkey"
          },
          {
            "name": "authority",
            "docs": [
              "The owner that has permission to set reward param"
            ],
            "type": "pubkey"
          },
          {
            "name": "reward_growth_global_x64",
            "docs": [
              "Q64.64 number that tracks the total tokens earned per unit of liquidity since the reward",
              "emissions were turned on."
            ],
            "type": "u128"
          }
        ]
      }
    },
    {
      "name": "SandwichCompleteEvent",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "sandwich_id",
            "type": "string"
          },
          {
            "name": "profit",
            "type": "u64"
          },
          {
            "name": "input_amount",
            "type": "u64"
          },
          {
            "name": "output_amount",
            "type": "u64"
          },
          {
            "name": "timestamp",
            "type": "i64"
          }
        ]
      }
    },
    {
      "name": "SandwichState",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "frontrun_output_amount",
            "type": "u64"
          },
          {
            "name": "frontrun_input_amount",
            "type": "u64"
          },
          {
            "name": "target_tx_signature",
            "type": {
              "array": [
                "u8",
                64
              ]
            }
          },
          {
            "name": "sandwich_id",
            "type": "string"
          },
          {
            "name": "is_complete",
            "type": "bool"
          },
          {
            "name": "token_in_mint",
            "type": "pubkey"
          },
          {
            "name": "token_out_mint",
            "type": "pubkey"
          },
          {
            "name": "timestamp",
            "type": "i64"
          },
          {
            "name": "bump",
            "type": "u8"
          }
        ]
      }
    }
  ]
}